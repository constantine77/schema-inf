Implementation of Spark listeners and lineage spark-collector.

<profile>
        <id>scala-2.12_spark-3.0.1_emr-6.2.0</id>
        <properties>
            <scala.version>2.12.10</scala.version>
            <scala.binary.version>2.12</scala.binary.version>
            <spark.version>3.0.1</spark.version>
        </properties>
</profile>
def get_combined_context(query: str):
    swagger_lines = swagger_context if swagger_context else []
    vector_docs = vectordb.similarity_search(query, k=4)
    vector_lines = [doc.page_content for doc in vector_docs]
    return swagger_lines + vector_lines

# === INFERENCE FUNCTION ===
def inference(message, history):
    context_chunks = get_combined_context(message)
    context = "\n===\n".join(context_chunks)

    # Inject context into query for the agent
    injected_query = f"""
Use the following context to assist in answering the user's question.

Context:
{context}

Question:
{message}
"""
    return agent.run(injected_query)
